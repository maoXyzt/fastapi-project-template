# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# template for the changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file. \
See [约定式提交](https://www.conventionalcommits.org/zh-hans/v1.0.0/#%E6%A6%82%E8%BF%B0)\
/[Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/#summary) for commit guidelines.\n
Auto-generated from git commits. Manual editions will be ***overwritten***.\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
---\n
{% if version %}\
    {% if previous.version %}\
        ## [{{ version | trim_start_matches(pat="v") }}]($REPO/compare/{{ previous.version }}..{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
    {% else %}\
        ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
    {% endif %}\
    \nLink to [release {{ version}}]($REPO/-/releases/{{ version }}).
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
  ### {{ group | striptags | trim | upper_first }}
  {% for commit in commits
  | filter(attribute="scope")
  | sort(attribute="scope") %}
    - **({{commit.scope}})**{% if commit.breaking %} [**breaking**]{% endif %} \
      {{ commit.message }} - ([{{ commit.id | truncate(length=7, end="") }}]($REPO/commit/{{ commit.id }}) by [{{ commit.author.name }}]($HOST/{{ commit.author.name }}))
  {%- endfor -%}
  {% raw %}\n{% endraw %}\
  {%- for commit in commits %}
    {%- if commit.scope -%}
    {% else -%}
      - {% if commit.breaking %} [**breaking**]{% endif %}\
        {{ commit.message }} - ([{{ commit.id | truncate(length=7, end="") }}]($REPO/commit/{{ commit.id }}) by [{{ commit.author.name }}]($HOST/{{ commit.author.name }}))
    {% endif -%}
  {% endfor -%}
{% endfor %}
### 💖 Contributors
{% for name in commits | map(attribute="author.name") | unique | sort %}
- [{{ name }}]($HOST/{{ name }})
{%- endfor %}\n\n
"""
# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# remove the leading and trailing whitespace from the templates
trim = true
# postprocessors
postprocessors = [
  { pattern = '\$REPO', replace = "https://github.com/maoXyzt/fastapi-project-template" }, # replace repository URL
  { pattern = '\$HOST', replace = "https://github.com" },                                  # replace repository host URL
]

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/orhun/git-cliff/issues/${2}))"}, # replace issue numbers
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat", group = "<!-- 00 -->⛰️  Features" },
  { message = "^fix", group = "<!-- 01 -->🐛 Bug Fixes" },
  { message = "^doc", group = "<!-- 03 -->📚 Documentation" },
  { message = "^perf", group = "<!-- 04 -->⚡ Performance" },
  { message = "^refactor\\(clippy\\)", skip = true },
  { message = "^refactor", group = "<!-- 02 -->🚜 Refactor" },
  { message = "^style", group = "<!-- 05 -->🎨 Styling" },
  { message = "^test", group = "<!-- 06 -->🧪 Testing" },
  # Example: "chore(release): prepare for v1.0.0"
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(deps.*\\)", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^chore\\(npm\\).*yarn\\.lock", skip = true },
  { message = "^chore|^ci", group = "<!-- 07 -->⚙️ Miscellaneous Tasks" },
  { body = ".*security", group = "<!-- 08 -->🛡️ Security" },
  { message = "^revert", group = "<!-- 09 -->◀️ Revert" },
  { message = "^Merge .*branch", skip = true },                            # Custom group for merge commits, skipped
  { message = "^WIP", skip = true },                                       # Work-in-Progress commits
  { message = "^.*", group = "<!-- 10 -->📦 Others" },                      # Custom group for other commits
]
# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
